generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------
// ENUMS
// ------------------------------------------

enum Role {
  ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

// ------------------------------------------
// MODELS
// ------------------------------------------

model User {
  id        String   @id @default(uuid())
  role      Role     @default(EMPLOYEE)
  name      String
  email     String   @unique
  mobile    String?
  password  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  certificatesIssued Certificate[] @relation("IssuedByUser")
}

model University {
  id        String   @id @default(uuid())
  name      String   @unique
  address   String?
  createdAt DateTime @default(now())

  colleges College[]
  students Student[]
}

model College {
  id           String      @id @default(uuid())
  name         String
  address      String?
  collegeCode  String?
  createdAt    DateTime    @default(now())
  universityId String?
  university   University? @relation(fields: [universityId], references: [id])

  students Student[]

  @@index([name])
}

model Student {
  id                     String   @id @default(uuid())
  fullName               String
  fatherName             String
  gender                 Gender
  email                  String?
  mobile                 String?
  universityEnrollmentNo String   @unique
  collegeId              String?
  universityId           String?
  meta                   Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  college      College?      @relation(fields: [collegeId], references: [id])
  university   University?   @relation(fields: [universityId], references: [id])
  certificates Certificate[]

  @@index([fullName])
  @@index([fatherName])
  @@index([universityEnrollmentNo])
}

model Certificate {
  id               String    @id @default(uuid())
  certNumber       String    @unique
  studentId        String?
  issuedById       String?
  public_id        String?
  certificateURL   String?
  pdfSHA256        String?
  verificationHash String    @unique
  qrData           String?
  course           String?
  internshipFrom   DateTime?
  internshipTo     DateTime?
  revoked          Boolean   @default(false)
  revokedAt        DateTime?
  issuedAt         DateTime  @default(now())
  createdAt        DateTime  @default(now())

  // Relations
  student  Student? @relation(fields: [studentId], references: [id])
  issuedBy User?    @relation("IssuedByUser", fields: [issuedById], references: [id])

  @@index([issuedAt])
  @@map("certificates")
}

model blacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
}
